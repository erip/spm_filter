#!/usr/bin/env python3

from pathlib import Path
from argparse import ArgumentParser, FileType

from .filter import spm_filter

import sentencepiece as spm


def setup_argparse():
    parser = ArgumentParser()
    parser.add_argument("-m", "--model", type=Path, required=True, help="The path to the unigram LM model generated by SentencePiece")
    parser.add_argument("--max-len", type=int, default=256, help="The maximum length of the segment after segmentation")
    parser.add_argument("--min-len", type=int, default=0, help="The minimum length of the segment after segmentation")
    parser.add_argument("-b", "--buffer-size", type=int, default=1024, help="The buffer size for minimizing reads")
    parser.add_argument("-i", "--input", type=FileType("r"), default="-", help="The input from which to read. By default read from stdin")
    return parser


def main():
    args = setup_argparse().parse_args()
    assert args.buffer_size > 0, "buffer_size must be positive"
    assert args.min_len >= 0, "min_len must be non-negative"
    assert args.max_len > 0, "max_len must be positive"
    assert args.min_len < args.max_len, "min_len must be less than max_len"
    model = spm.SentencePieceProcessor(str(args.model))
    with args.input as f:
        for batch in spm_filter(model, map(str.strip, f), min_len=args.min_len, max_len=args.max_len, buffer_size=args.buffer_size):
            for e in batch:
                print(e)
